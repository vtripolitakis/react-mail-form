{"version":3,"sources":["webpack:///./src/components/MainFormContent.jsx"],"names":["MainFormContent","formData","content","formState","changeHandler","formID","Object","keys","map","i","objectData","isRequired","required","outData","type","checkboxArrayData","options","j","isChecked","indexOf","key","className","name","value","defaultChecked","onChange","e","target","id","currentOptionSelected","selectData","selected","unshift","disabled","rows","cols","defaultValue","preventDefault","stopPropagation","width","maxwidth","label","btcolumns","htmlFor","defaultProps","propTypes","PropTypes","objectOf","object","oneOfType","array","string","func"],"mappings":"yFAAA,4CAGMA,EAAkB,SAAC,GAEnB,IACAC,EAFJC,EACI,EADJA,QAASC,EACL,EADKA,UAAWC,EAChB,EADgBA,cAAeC,EAC/B,EAD+BA,OAkHnC,OA/GAJ,EAAWK,OAAOC,KAAKL,GAASM,KAAI,SAACC,GACnC,IAAMC,EAAaR,EAAQO,GACrBE,EAAaD,EAAWE,SAC1BC,EAAU,KACd,OAAQH,EAAWI,MACjB,IAAK,iBACH,IAAMC,EAAoBL,EAAWM,QAAQR,KAAI,SAACS,GAChD,IAAIC,GAAY,EAIhB,OAHIf,EAAUM,GAAGU,QAAQF,IAAM,IAC7BC,GAAY,GAGZ,yBAAKE,IAAKH,EAAGI,UAAU,YACrB,2BACEP,KAAK,WACLQ,KAAI,UAAKb,EAAL,MACJc,MAAON,EACPO,eAAgBN,EAChBO,SAAU,SAACC,GACTtB,EAAcK,EAAG,iBAAkBiB,EAAEC,OAAOJ,UAG/C,IACAN,MAIPJ,EAAU,yBAAKe,GAAInB,GAAIM,GACvB,MAEF,IAAK,SACH,IAAIc,GAAwB,EACtBC,EAAapB,EAAWM,QAAQR,KAAI,SAACS,GAQzC,YAPkC,IAAvBP,EAAU,UAEjBmB,EADEnB,EAAU,UAAaO,GAMtB,4BAAQG,IAAKH,EAAGc,SAAUF,GAAwBZ,MAE3Da,EAAWE,QAAQ,4BAAQC,UAAQ,EAACF,UAAWF,EAAuBT,IAAI,gBAAgBG,MAAM,IAA7E,kBACnBV,EACE,yBAAKe,GAAInB,GACP,4BACEG,SAAUD,EACVc,SAAU,SAACC,GACTtB,EAAcK,EAAG,SAAUiB,EAAEC,OAAOJ,SAGrCO,IAIP,MAEF,IAAK,WACHjB,EACE,yBAAKe,GAAInB,GACP,8BACEyB,KAAMxB,EAAWwB,KACjBC,KAAMzB,EAAWyB,KACjBC,aAAcjC,EAAUM,GACxBgB,SAAU,SAACC,GACTA,EAAEW,iBACFX,EAAEY,kBACFlC,EAAcK,EAAG,WAAYiB,EAAEC,OAAOJ,QAExCX,SAAUD,KAIhB,MACF,IAAK,OACHE,EACE,yBAAKe,GAAInB,GACP,2BACEK,KAAMJ,EAAWI,KACjByB,MAAO7B,EAAW8B,SAClBJ,aAAcjC,EAAUM,GACxBgB,SAAU,SAACC,GACTA,EAAEW,iBACFX,EAAEY,kBACFlC,EAAcK,EAAG,OAAQiB,EAAEC,OAAOJ,QAEpCX,SAAUD,KAQpB,IAAI8B,EAAQ,GAMZ,OAJEA,OAD8B,IAArBvC,EAAQO,GAAGgC,MACZhC,EAEAP,EAAQO,GAAGgC,MAGnB,yBAAKrB,IAAKX,EAAGY,UAAS,4BAAuBX,EAAWgC,YACtD,2BAAOC,QAASlC,GACbgC,EACA,IACC9B,EAAc,IAAM,IAEvBE,MAKL,6BACE,0BAAMe,GAAIvB,GACPJ,KAMTD,EAAgB4C,aAAe,CAC7B1C,QAAS,GACTC,UAAW,GACXC,cAAe,aACfC,OAAQ,MAGVL,EAAgB6C,UAAY,CAC1B3C,QAAS4C,IAAUC,SAASD,IAAUE,QACtC7C,UAAW2C,IAAUC,SACnBD,IAAUG,UAAU,CAACH,IAAUI,MAAOJ,IAAUE,OAAQF,IAAUK,UAEpE/C,cAAe0C,IAAUM,KACzB/C,OAAQyC,IAAUK,QAILnD","file":"6.react-mail-form.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst MainFormContent = ({\n  content, formState, changeHandler, formID,\n}) => {\n  let formData = null;\n  formData = Object.keys(content).map((i) => {\n    const objectData = content[i];\n    const isRequired = objectData.required;\n    let outData = null;\n    switch (objectData.type) {\n      case 'checkbox_array': {\n        const checkboxArrayData = objectData.options.map((j) => {\n          let isChecked = false;\n          if (formState[i].indexOf(j) > -1) {\n            isChecked = true;\n          }\n          return (\n            <div key={j} className=\"col-md-4\">\n              <input\n                type=\"checkbox\"\n                name={`${i}[]`}\n                value={j}\n                defaultChecked={isChecked}\n                onChange={(e) => {\n                  changeHandler(i, 'checkbox_array', e.target.value);\n                }}\n              />\n              {' '}\n              {j}\n            </div>\n          );\n        });\n        outData = <div id={i}>{checkboxArrayData}</div>;\n        break;\n      }\n      case 'select': {\n        let currentOptionSelected = false;\n        const selectData = objectData.options.map((j) => {\n          if (typeof objectData.default !== 'undefined') {\n            if (objectData.default === j) {\n              currentOptionSelected = true;\n            } else {\n              currentOptionSelected = false;\n            }\n          }\n          return <option key={j} selected={currentOptionSelected}>{j}</option>;\n        });\n        selectData.unshift(<option disabled selected={!currentOptionSelected} key=\"please select\" value=\"\">Please Select</option>);\n        outData = (\n          <div id={i}>\n            <select\n              required={isRequired}\n              onChange={(e) => {\n                changeHandler(i, 'select', e.target.value);\n              }}\n            >\n              {selectData}\n            </select>\n          </div>\n        );\n        break;\n      }\n      case 'textarea':\n        outData = (\n          <div id={i}>\n            <textarea\n              rows={objectData.rows}\n              cols={objectData.cols}\n              defaultValue={formState[i]}\n              onChange={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                changeHandler(i, 'textarea', e.target.value);\n              }}\n              required={isRequired}\n            />\n          </div>\n        );\n        break;\n      case 'text':\n        outData = (\n          <div id={i}>\n            <input\n              type={objectData.type}\n              width={objectData.maxwidth}\n              defaultValue={formState[i]}\n              onChange={(e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                changeHandler(i, 'text', e.target.value);\n              }}\n              required={isRequired}\n            />\n          </div>\n        );\n        break;\n      default:\n        break;\n    }\n    let label = '';\n    if (typeof content[i].label === 'undefined') {\n      label = i;\n    } else {\n      label = content[i].label;\n    }\n    return (\n      <div key={i} className={`form-group col-md-${objectData.btcolumns}`}>\n        <label htmlFor={i}>\n          {label}\n          {' '}\n          {(isRequired) ? '*' : ''}\n        </label>\n        {outData}\n      </div>\n    );\n  });\n  return (\n    <div>\n      <form id={formID}>\n        {formData}\n      </form>\n    </div>\n  );\n};\n\nMainFormContent.defaultProps = {\n  content: [],\n  formState: {},\n  changeHandler: () => {},\n  formID: null,\n};\n\nMainFormContent.propTypes = {\n  content: PropTypes.objectOf(PropTypes.object),\n  formState: PropTypes.objectOf(\n    PropTypes.oneOfType([PropTypes.array, PropTypes.object, PropTypes.string]),\n  ),\n  changeHandler: PropTypes.func,\n  formID: PropTypes.string,\n};\n\n\nexport default MainFormContent;\n"],"sourceRoot":""}