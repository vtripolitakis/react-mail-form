{"version":3,"sources":["webpack:///./src/ReactMailForm.jsx"],"names":["require","polyfill","MainFormContent","loadable","Header","Footer","ButtonList","ReactMailForm","props","state","dataLoaded","formConfiguration","changeHandler","bind","submitHandler","formConfigurationURL","this","axios","get","then","response","content","Object","keys","data","map","c","type","setState","i","e","previousState","newState","idx","indexOf","splice","push","preventDefault","stopPropagation","formID","endpoint","document","getElementById","reportValidity","post","headers","toast","querySelectorAll","forEach","node","classList","add","window","setTimeout","remove","formTitle","footerText","formContent","formState","React","Component","propTypes","PropTypes","string","defaultProps"],"mappings":"4wCAOAA,EAAQ,IAAeC,WACvB,IAAMC,EAAkBC,aAAS,kBAAM,gCACjCC,EAASD,aAAS,kBAAM,gCACxBE,EAASF,aAAS,kBAAM,gCACxBG,EAAaH,aAAS,kBAAM,gCAEbI,E,YACnB,WAAYC,GAAO,M,IAAA,O,4FAAA,S,EACjB,U,EAAA,eAAMA,K,8CACDC,MAAQ,CACXC,YAAY,EACZC,kBAAmB,MAErB,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,MACrB,EAAKC,cAAgB,EAAKA,cAAcD,KAAnB,MAPJ,E,2SAUC,WAEVE,EAAyBC,KAAKR,MAA9BO,qBACRE,IAAMC,IAAIH,GACPI,MAAK,SAACC,GAEL,IAAMC,EAAU,GAChBC,OAAOC,KAAKH,EAASI,KAAKH,SAASI,KAAI,SAACC,GACtC,QAAkD,IAAtCN,EAASI,KAAKH,QAAQK,GAAtB,QACVL,EAAQK,GAAKN,EAASI,KAAKH,QAAQK,GAAtB,aAGb,OAAQN,EAASI,KAAKH,QAAQK,GAAGC,MAC/B,IAAK,OAGL,IAAK,WACHN,EAAQK,GAAK,GACb,MACF,IAAK,iBAEHL,EAAQK,GAAK,GACb,MACF,IAAK,SACHL,EAAQK,GAAK,GAMnB,OAAO,QAET,EAAKE,UAAS,iBAAO,CAAEP,cACvB,EAAKO,UAAS,iBAAO,CACnBlB,YAAY,EACZC,kBAAmBS,EAASI,YAhClC,OAmCS,iB,oCAKGK,EAAGF,EAAMG,GACrBd,KAAKY,UAAS,SAACG,GACb,IAAMC,E,+VAAW,CAAH,GAAQD,GAChBE,EAAMD,EAASX,QAAQQ,GAAGK,QAAQJ,GACxC,OAAQH,GACN,IAAK,OAGL,IAAK,WAGL,IAAK,SACHK,EAASX,QAAQQ,GAAKC,EACtB,MACF,IAAK,iBAECG,GAAO,EACTD,EAASX,QAAQQ,GAAGM,OAAOF,EAAK,GAEhCD,EAASX,QAAQQ,GAAGO,KAAKN,GAM/B,OAAOE,O,oCAIGF,GAEZA,EAAEO,iBACFP,EAAEQ,kBAHa,MAIwBtB,KAAKP,MAApCE,EAJO,EAIPA,kBAAmBU,EAJZ,EAIYA,QACnBkB,EAAqB5B,EAArB4B,OAAQC,EAAa7B,EAAb6B,SAEZC,SAASC,eAAeH,GAAQI,iBAClC1B,IAAM2B,KACJJ,EACAnB,EACA,CACEwB,QAAS,CACP,eAAgB,sBAInB1B,MAAK,WACJ2B,YAAM,cAVV,OAYS,WACLA,YAAM,eAGVL,SAASM,iBAAT,WAA8BR,EAA9B,cACGS,SAAQ,SAACC,GACRA,EAAKC,UAAUC,IAAI,0BAEvBC,OAAOC,YAAW,WAChBZ,SAASM,iBAAT,WAA8BR,EAA9B,cACGS,SAAQ,SAACC,GACRA,EAAKC,UAAUI,OAAO,4BAEzB,Q,+BAML,GADuBtC,KAAKP,MAApBC,WACQ,OAIVM,KAAKP,MAFPY,EAFY,EAEZA,QACAV,EAHY,EAGZA,kBAEM4B,EAAW5B,EAAX4B,OACAgB,EAAgD5C,EAAhD4C,UAAWC,EAAqC7C,EAArC6C,WAAqBC,EAAgB9C,EAAzBU,QAC/B,OACE,6BACE,kBAAC,IAAD,MACA,kBAACjB,EAAD,CAAQmD,UAAWA,IACnB,kBAACrD,EAAD,CACImB,QAASoC,EACTC,UAAWrC,EACXkB,OAAQA,EACR3B,cAAeI,KAAKJ,gBAExB,kBAACN,EAAD,CAAYQ,cAAeE,KAAKF,gBAChC,kBAACT,EAAD,CAAQmD,WAAYA,KAI1B,OAAO,6C,8BAhJgCG,IAAMC,WAoJjDrD,EAAcsD,UAAY,CACxB9C,qBAAsB+C,IAAUC,QAGlCxD,EAAcyD,aAAe,CAC3BjD,qBAAsB","file":"2.react-mail-form.js","sourcesContent":["import React, { Suspense } from 'react';\nimport PropTypes from 'prop-types';\nimport axios from 'axios';\nimport loadable from '@loadable/component'\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nrequire('es6-promise').polyfill();\nconst MainFormContent = loadable(() => import('./components/MainFormContent'))\nconst Header = loadable(() => import('./components/Header'))\nconst Footer = loadable(() => import('./components/Footer'))\nconst ButtonList = loadable(() => import('./components/ButtonList'))\n\nexport default class ReactMailForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dataLoaded: false,\n      formConfiguration: null,\n    };\n    this.changeHandler = this.changeHandler.bind(this);\n    this.submitHandler = this.submitHandler.bind(this);\n  }\n\n  componentDidMount() {\n    /* start axios request to load configuration */\n    const { formConfigurationURL } = this.props;\n    axios.get(formConfigurationURL)\n      .then((response) => {\n        // get all fields and add their default data\n        const content = {};\n        Object.keys(response.data.content).map((c) => {\n          if (typeof (response.data.content[c].default) !== 'undefined') {\n            content[c] = response.data.content[c].default;\n          } else {\n            // ToDo: check type and update accordingly\n            switch (response.data.content[c].type) {\n              case 'text':\n                content[c] = '';\n                break;\n              case 'textarea':\n                content[c] = '';\n                break;\n              case 'checkbox_array':\n                // check if it exists and delete otherwise add\n                content[c] = [];\n                break;\n              case 'select':\n                content[c] = '';\n                break;\n              default:\n                break;\n            }\n          }\n          return null;\n        });\n        this.setState(() => ({ content }));\n        this.setState(() => ({\n          dataLoaded: true,\n          formConfiguration: response.data,\n        }));\n      })\n      .catch(() => {\n        // console.log(\"ERROR\", error)\n      });\n  }\n\n  changeHandler(i, type, e) {\n    this.setState((previousState) => {\n      const newState = { ...previousState };\n      const idx = newState.content[i].indexOf(e);\n      switch (type) {\n        case 'text':\n          newState.content[i] = e;\n          break;\n        case 'textarea':\n          newState.content[i] = e;\n          break;\n        case 'select':\n          newState.content[i] = e;\n          break;\n        case 'checkbox_array':\n          // check if it exists and delete otherwise add\n          if (idx > -1) {\n            newState.content[i].splice(idx, 1);\n          } else {\n            newState.content[i].push(e);\n          }\n          break;\n        default:\n          break;\n      }\n      return newState;\n    });\n  }\n\n  submitHandler(e) {\n    /* start axios request to submit form data */\n    e.preventDefault();\n    e.stopPropagation();\n    const { formConfiguration, content } = this.state;\n    const { formID, endpoint } = formConfiguration;\n    // perform some basic validation\n    if (document.getElementById(formID).reportValidity()) {\n      axios.post(\n        endpoint,\n        content,\n        {\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        },\n      )\n        .then(() => {\n          toast('Success');\n        })\n        .catch(() => {\n          toast('Failure');\n        });\n    } else {\n      document.querySelectorAll(`#${formID} :invalid`)\n        .forEach((node) => {\n          node.classList.add('invalidInputElement');\n        });\n      window.setTimeout(() => {\n        document.querySelectorAll(`#${formID} :invalid`)\n          .forEach((node) => {\n            node.classList.remove('invalidInputElement');\n          });\n      }, 1000);\n    }\n  }\n\n  render() {\n    const { dataLoaded } = this.state;\n    if (dataLoaded) {\n      const {\n        content,\n        formConfiguration,\n      } = this.state;\n      const { formID } = formConfiguration;\n      const { formTitle, footerText, content: formContent } = formConfiguration;\n      return (\n        <div>\n          <ToastContainer />\n          <Header formTitle={formTitle} />\n          <MainFormContent\n              content={formContent}\n              formState={content}\n              formID={formID}\n              changeHandler={this.changeHandler}\n          />\n          <ButtonList submitHandler={this.submitHandler} />\n          <Footer footerText={footerText} />          \n        </div>\n      );\n    }\n    return <div>loading</div>;\n  }\n}\n\nReactMailForm.propTypes = {\n  formConfigurationURL: PropTypes.string,\n};\n\nReactMailForm.defaultProps = {\n  formConfigurationURL: null,\n};\n"],"sourceRoot":""}